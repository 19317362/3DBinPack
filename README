Copyright (C) 2012 by Arash Sharif

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
------------------------------------------------------------------------------------------------

This is a slight modification to the classic bin packing algorithm.  Instead of having a finite 
set of boxes that need to be packed it assumes a bin, a given box and figures out how
many boxes  of that size fit in the bin

I used it for figuring how to cut material with least amount of waste


(Note:  For use of JNA or JNI you need to put the path of the .so file in the LD_LIBRARY_PATH)

run it:

groovy pack3d.groovy 5,5,5 1,1,1 0
java pack3d 5,5,5 1,1,1 0,0,0
./pack3d 5,5,5 1,1,1 0,0,0

some benchmarks:

for 50 x 50 x 50 and you want 2 x 2 x 2

groovy: 325 ms
java: 10 ms
c:  2 ms

for larger 500,500,500 and you want 2 x 2 x 2

groovy: (NA too freaking slow to measure)
java: 5198 ms
c: 1162 ms



****NOTE**** currently only java and c versions have the ability to use diff tolerance + kerf.  groovy only allows for 1 tol+kerf for all 'cuts' or 'fits'
